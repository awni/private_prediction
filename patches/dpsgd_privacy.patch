--- dpsgd_privacy.py	2020-07-01 13:26:32.000000000 -0400
+++ backup/dpsgd_privacy.py	2020-07-01 11:33:11.000000000 -0400
@@ -1,10 +1,17 @@
+#!/usr/bin/env python3
+
+"""
+This code is modified from
+https://github.com/tensorflow/privacy/tree/master/tensorflow_privacy/privacy/analysis
+"""
+
 # Copyright 2019 The TensorFlow Authors. All Rights Reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
-#     http://www.apache.org/licenses/LICENSE-2.0
+#  http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
@@ -12,86 +19,67 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 # ==============================================================================
-r"""Command-line script for computing privacy of a model trained with DP-SGD.
-
-The script applies the RDP accountant to estimate privacy budget of an iterated
-Sampled Gaussian Mechanism. The mechanism's parameters are controlled by flags.
-
-Example:
-  compute_dp_sgd_privacy
-    --N=60000 \
-    --batch_size=256 \
-    --noise_multiplier=1.12 \
-    --epochs=60 \
-    --delta=1e-5
-
-The output states that DP-SGD with these parameters satisfies (2.92, 1e-5)-DP.
-"""
-
-from __future__ import absolute_import
-from __future__ import division
-from __future__ import print_function
+"""Library for computing privacy values for DP-SGD."""
 
+import logging
 import math
-import sys
-
-from absl import app
-from absl import flags
-
-# Opting out of loading all sibling packages and their dependencies.
-sys.skip_tf_privacy_import = True
-
-from tensorflow_privacy.privacy.analysis.rdp_accountant import compute_rdp  # pylint: disable=g-import-not-at-top
-from tensorflow_privacy.privacy.analysis.rdp_accountant import get_privacy_spent
+import numpy as np
 
-FLAGS = flags.FLAGS
-
-flags.DEFINE_integer('N', None, 'Total number of examples')
-flags.DEFINE_integer('batch_size', None, 'Batch size')
-flags.DEFINE_float('noise_multiplier', None, 'Noise multiplier for DP-SGD')
-flags.DEFINE_float('epochs', None, 'Number of epochs (may be fractional)')
-flags.DEFINE_float('delta', 1e-6, 'Target delta')
-
-flags.mark_flag_as_required('N')
-flags.mark_flag_as_required('batch_size')
-flags.mark_flag_as_required('noise_multiplier')
-flags.mark_flag_as_required('epochs')
+from rdp_accountant import compute_rdp, get_privacy_spent
 
 
 def apply_dp_sgd_analysis(q, sigma, steps, orders, delta):
-  """Compute and print results of DP-SGD analysis."""
-
-  # compute_rdp requires that sigma be the ratio of the standard deviation of
-  # the Gaussian noise to the l2-sensitivity of the function to which it is
-  # added. Hence, sigma here corresponds to the `noise_multiplier` parameter
-  # in the DP-SGD implementation found in privacy.optimizers.dp_optimizer
-  rdp = compute_rdp(q, sigma, steps, orders)
-
-  eps, _, opt_order = get_privacy_spent(orders, rdp, target_delta=delta)
-
-  print('DP-SGD with sampling rate = {:.3g}% and noise_multiplier = {} iterated'
-        ' over {} steps satisfies'.format(100 * q, sigma, steps), end=' ')
-  print('differential privacy with eps = {:.3g} and delta = {}.'.format(
-      eps, delta))
-  print('The optimal RDP order is {}.'.format(opt_order))
-
-  if opt_order == max(orders) or opt_order == min(orders):
-    print('The privacy estimate is likely to be improved by expanding '
-          'the set of orders.')
-
-
-def main(argv):
-  del argv  # argv is not used.
-
-  q = FLAGS.batch_size / FLAGS.N  # q - the sampling ratio.
-  if q > 1:
-    raise app.UsageError('N must be larger than the batch size.')
-  orders = ([1.25, 1.5, 1.75, 2., 2.25, 2.5, 3., 3.5, 4., 4.5] +
-            list(range(5, 64)) + [128, 256, 512])
-  steps = int(math.ceil(FLAGS.epochs * FLAGS.N / FLAGS.batch_size))
-
-  apply_dp_sgd_analysis(q, FLAGS.noise_multiplier, steps, orders, FLAGS.delta)
-
+    """Compute and print results of DP-SGD analysis."""
 
-if __name__ == '__main__':
-  app.run(main)
+    # compute_rdp requires that sigma be the ratio of the standard deviation of
+    # the Gaussian noise to the l2-sensitivity of the function to which it is
+    # added. Hence, sigma here corresponds to the `noise_multiplier` parameter
+    # in the DP-SGD implementation found in privacy.optimizers.dp_optimizer
+    rdp = compute_rdp(q, sigma, steps, orders)
+
+    eps, _, opt_order = get_privacy_spent(orders, rdp, target_delta=delta)
+
+    logging.debug(
+        ("DP-SGD with sampling rate = {:.3g}% and noise_multiplier = {} "
+         "iterated over {} steps satisfies differential privacy with "
+         "eps = {:.3g} and delta = {}.").format(
+             100 * q, sigma, steps, eps, delta))
+    logging.debug('The optimal RDP order is {}.'.format(opt_order))
+
+    if opt_order == max(orders) or opt_order == min(orders):
+        logging.debug('The privacy estimate is likely to be improved by expanding '
+                    'the set of orders.')
+
+    return eps, opt_order
+
+
+def compute_dp_sgd_privacy(n, batch_size, noise_multiplier, epochs, delta):
+    """Compute epsilon based on the given hyperparameters."""
+    q = batch_size / n  # q - the sampling ratio.
+    orders = [1.25, 1.5, 1.75, 2., 2.25, 2.5, 3., 3.5, 4., 4.5]
+    orders.extend(list(range(5, 64)) + [128, 256, 512])
+    steps = int(math.ceil(epochs * n / batch_size))
+
+    return apply_dp_sgd_analysis(q, noise_multiplier, steps, orders, delta)
+
+
+def compute_noise_multiplier(
+        epsilon, delta, n, batch_size, epochs, step=1e-3, max_val=1e3):
+    """
+    Binary search over noise multipliers to find desired epsilon
+    for a given setting of parameters.
+    """
+    noise_multipliers = np.arange(step, max_val, step)
+    while len(noise_multipliers) > 1:
+        idx = len(noise_multipliers) // 2
+        eps, _ = compute_dp_sgd_privacy(
+            n, batch_size, noise_multipliers[idx], epochs, delta)
+        # increase noise multiplier
+        if eps > epsilon:
+            noise_multipliers = noise_multipliers[idx:]
+        else:
+            noise_multipliers = noise_multipliers[:idx]
+    if abs(eps - epsilon) > 1e-1:
+        logging.warning(
+            "Unable to find epsilon, increase search range or shrink step size")
+    return noise_multipliers[0], eps
